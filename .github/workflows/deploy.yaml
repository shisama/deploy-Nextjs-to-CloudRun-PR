name: deploy Next.js to Cloud Run

on:
  pull_request:
    types: labeled

env:
  NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GCP_REGION: ${{ secrets.GCP_REGION }}
  CACHE_IMAGE: asia.gcr.io/${{ secrets.GCP_PROJECT_ID }}/frontend-pr-nextjs-app:cache
  IMAGE: asia.gcr.io/${{ secrets.GCP_PROJECT_ID }}/frontend-pr-nextjs-app:${{ github.head_ref }}

jobs:
  deploy-nextjs-app:
    if: ${{ github.event.label.name == 'deploy' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version-file: .node-version
          registry-url: https://npm.pkg.github.com/
      - uses: actions/cache@v3
        id: node_modules_cache_id
        env:
          cache-name: cache-node-modules
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-setup-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
      - if: ${{ steps.node_modules_cache_id.outputs.cache-hit != 'true' }}
        run: npm ci
        shell: bash
      - uses: actions/cache@v2
        with:
          # See here for caching with `yarn` https://github.com/actions/cache/blob/main/examples.md#node---yarn or you can leverage caching with actions/setup-node https://github.com/actions/setup-node
          path: |
            ~/.npm
            ${{ github.workspace }}/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-
      - name: Run build
        run: npm run build
      - id: "auth"
        uses: "google-github-actions/auth@v0"
        with:
          credentials_json: "${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}"
      - name: Configure docker to use the gcloud cli
        run: gcloud auth configure-docker --quiet
      - name: Pull the docker image for cache
        run: |
          docker pull -q ${{ env.CACHE_IMAGE }} || exit 0 &
          docker pull -q ${{ env.IMAGE }} || exit 0 &
          wait
      - name: Build a docker image
        run: docker build --cache-from ${{ env.IMAGE }},${{ env.CACHE_IMAGE }} -t ${{ env.IMAGE }} -f ./Dockerfile .
      - name: Tag a container image
        run: docker tag $(docker images --filter 'label=build-stage=installer' -q | head -n 1) ${{ env.CACHE_IMAGE }}
      - name: Push the docker image
        run: |
          docker push ${{ env.IMAGE }} &
          docker push ${{ env.CACHE_IMAGE }} &
          wait
      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v0
        with:
          service: frontend-pr-${{ github.event.pull_request.number }}
          image: ${{ env.IMAGE }}
          region: ${{ env.GCP_REGION }}
          flags: "--allow-unauthenticated --memory=512Mi --port=3000"
      - name: Comment
        uses: peter-evans/create-or-update-comment@v1.4.5
        id: report-comment
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: "${{ steps.deploy.outputs.url }}"